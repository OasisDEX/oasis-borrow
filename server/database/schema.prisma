generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model migrations {
  id          Int       @id
  name        String    @unique @db.VarChar(100)
  hash        String    @db.VarChar(40)
  executed_at DateTime? @default(now()) @db.Timestamp(6)
}

model TosApproval {
  id          Int      @id @default(autoincrement())
  address     String   @db.VarChar(66)
  doc_version String   @db.VarChar
  sign_date   DateTime @db.Timestamp(6)
  signature   String   @default("0x0") @db.VarChar
  message     String   @default("0x0") @db.VarChar
  chain_id    Int      @default(0)

  @@unique([address, doc_version], name: "tos_approval_unique_signature", map: "tos_approval_unique_signature")
  @@unique([address, chain_id, doc_version])
  @@map("tos_approval")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model Vault {
  vault_id      Int
  type          VaultType
  owner_address String    @db.Char(42)
  chain_id      Int?
  protocol      String    @default("maker") @db.VarChar(32)
  token_pair    String    @default("") @db.VarChar(32)

  @@unique([vault_id, chain_id, protocol, token_pair, owner_address], name: "vault_unique_constraint", map: "vault_unique_constraint")
  @@map("vault")
  @@ignore
}

model User {
  address                    String        @unique
  timestamp                  DateTime      @default(now())
  user_that_referred_address String?
  accepted                   Boolean
  user_that_referred         User?         @relation("UserToUser", fields: [user_that_referred_address], references: [address])
  referred_users             User[]        @relation("UserToUser")
  weekly_claims              WeeklyClaim[]

  @@map("user")
}

model WeeklyClaim {
  id           Int       @id @default(autoincrement())
  week_number  Int
  user_address String
  proof        String[]
  amount       String
  timestamp    DateTime? @default(now())
  claimant     User      @relation(fields: [user_address], references: [address])

  @@unique([week_number, user_address], name: "week_number_userAddress_unique_id")
  @@map("weekly_claim")
}

model MerkleTree {
  week_number  Int       @unique
  tree_root    String
  start_block  Decimal?  @db.Decimal(78, 0)
  end_block    Decimal?  @db.Decimal(78, 0)
  timestamp    DateTime? @default(now())
  snapshot     String?
  tx_processed Boolean   @default(false)

  @@map("merkle_tree")
}

model WalletRisk {
  address    String   @unique(map: "wallet_risk_unique_index") @db.VarChar(66)
  last_check DateTime @db.Timestamp(6)
  is_risky   Boolean

  @@map("wallet_risk")
}

model CollateralType {
  collateral_name     String   @id(map: "collateral_name_key")
  next_price          Decimal
  current_price       Decimal
  liquidation_ratio   Decimal
  liquidation_penalty Decimal? @default(1.13)
  rate                Decimal?
  market_price        Decimal?

  @@map("collateral_type")
}

model Discover {
  protocol_id           String
  position_id           String
  collateral_type       String
  vault_normalized_debt Decimal?
  vault_debt            Decimal
  vault_collateral      Decimal
  yield_30d             Decimal
  status                Json
  last_action           Json
  pnl_all               Decimal
  pnl_1d                Decimal
  pnl_7d                Decimal
  pnl_30d               Decimal
  pnl_365d              Decimal
  pnl_ytd               Decimal
  createdAt             DateTime @default(now())
  updatedAt             DateTime
  token                 String?
  vault_type            String?
  net_profit_all        Decimal?
  net_profit_1d         Decimal?
  net_profit_7d         Decimal?
  net_profit_30d        Decimal?
  net_profit_365d       Decimal?
  net_profit_ytd        Decimal?

  @@unique([protocol_id, position_id])
  @@map("discover")
}

model UsersWhoFollowVaults {
  user_address   String
  vault_id       Int
  vault_chain_id Int
  protocol       Protocol

  @@id([user_address, vault_id, vault_chain_id, protocol])
  @@map("users_who_follow_vaults")
}

model ProductHubItems {
  id                      String                      @id @default(uuid())
  label                   String
  network                 NetworkNamesWithTestnets
  primaryToken            String
  primaryTokenGroup       String?
  product                 Product[]
  protocol                Protocol
  secondaryToken          String
  secondaryTokenGroup     String?
  weeklyNetApy            String?
  depositToken            String?
  fee                     String?
  liquidity               String?
  managementType          ProductHubManagementSimple?
  maxLtv                  String?
  maxMultiply             String?
  multiplyStrategy        String?
  multiplyStrategyType    ProductHubStrategy?
  reverseTokens           Boolean?
  updatedAt               DateTime                    @updatedAt
  tooltips                Json?
  primaryTokenAddress     String                      @default("0x0000000000000000000000000000000000000000")
  secondaryTokenAddress   String                      @default("0x0000000000000000000000000000000000000000")
  hasRewards              Boolean                     @default(false)
  earnStrategyDescription String?
  earnStrategy            EarnStrategies?

  @@unique([label, network, product, protocol, primaryToken, secondaryToken], name: "product_hub_item_id")
  @@map("product_hub_items")
}

model AjnaRewardsWeeklyClaim {
  id           Int               @id @default(autoincrement())
  timestamp    DateTime          @default(now())
  chain_id     Int
  user_address String
  amount       String
  week_number  Int
  proof        String[]
  source       AjnaRewardsSource

  @@unique([week_number, user_address, chain_id, source], name: "week_number_userAddress_chain_id_source_unique_id")
  @@map("ajna_rewards_weekly_claim")
}

model AjnaRewardsDailyClaim {
  id              Int                     @id @default(autoincrement())
  timestamp       DateTime                @default(now())
  chain_id        Int
  user_address    String
  amount          String
  week_number     Int
  day_number      Int
  account_address String
  pool_address    String
  source          AjnaRewardsSource
  type            AjnaRewardsPositionType

  @@unique([day_number, pool_address, account_address, chain_id, source, type], name: "day_number_pool_address_account_address_chain_id_source_type_unique_id")
  @@map("ajna_rewards_daily_claim")
}

model AjnaRewardsMerkleTree {
  id           Int               @id @default(autoincrement())
  timestamp    DateTime          @default(now())
  chain_id     Int
  week_number  Int
  tree_root    String
  tx_processed Boolean           @default(false)
  source       AjnaRewardsSource

  @@unique([week_number, chain_id, source], name: "week_number_chain_id_source_unique_id")
  @@map("ajna_rewards_merkle_tree")
}

model Tokens {
  address   String
  name      String
  symbol    String
  precision Int
  chain_id  Int
  source    String? @db.VarChar

  @@unique([address, chain_id], name: "address_chain_id_unique_id")
  @@map("tokens")
}

model vault_change_log {
  id             Int        @id @default(autoincrement())
  vault_id       Int
  chain_id       Int
  token_pair     String     @db.VarChar(32)
  owner_address  String     @db.Char(42)
  protocol       String     @db.VarChar(32)
  old_vault_type VaultType?
  new_vault_type VaultType?
  created_at     DateTime   @default(now()) @db.Timestamp(6)
}

enum VaultType {
  borrow
  multiply
  earn

  @@map("vault_type")
}

enum Protocol {
  maker
  aavev2
  aavev3
  ajna
  sparkv3
  morphoblue

  @@map("protocol")
}

enum NetworkNames {
  ethereum
  arbitrum
  polygon
  optimism
  base

  @@map("network")
}

enum NetworkNamesWithTestnets {
  ethereum
  ethereum_goerli
  arbitrum
  arbitrum_goerli
  polygon
  polygon_mumbai
  optimism
  optimism_goerli
  base
  base_goerli

  @@map("networkWithTestnets")
}

enum Product {
  borrow
  multiply
  earn

  @@map("product")
}

enum ProductHubManagement {
  active
  active_with_liq_risk
  passive

  @@map("managementType")
}

enum ProductHubManagementSimple {
  active
  passive

  @@map("managementTypeSimple")
}

enum EarnStrategies {
  liquidity_provision
  yield_loop
  other
  lending

  @@map("earnStrategies")
}

enum ProductHubStrategy {
  long
  short

  @@map("multiplyStrategyType")
}

enum AjnaRewardsSource {
  core
  bonus

  @@map("ajna_rewards_source")
}

enum AjnaRewardsPositionType {
  earn
  borrow

  @@map("ajna_rewards_position_type")
}
