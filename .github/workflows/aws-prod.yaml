on:
  push:
    branches:
      - main

name: Build and deploy to AWS Production
env:
  AWS_REGION: us-east-1
  ENVIRONMENT_TAG: prod
  SERVICE_NAME: summer-fi-prod
  CLUSTER_NAME: summer-fi-prod
  CONFIG_URL: ${{ secrets.CONFIG_URL }}

jobs:
  deploy:
    name: Build and deploy to AWS Production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18.12

      - name: Use modules cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}

      - name: Install packages
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn --no-progress --non-interactive --frozen-lockfile

      - name: Run postinstall
        if: steps.yarn-cache.outputs.cache-hit == 'true'
        run: yarn postinstall

      - name: Use next cache
        uses: jongwooo/next-cache@v1

      - name: Build standalone app
        id: build-app
        env:
          ADROLL_ADV_ID: ${{ secrets.ADROLL_ADV_ID_PROD }}
          ADROLL_PIX_ID: ${{ secrets.ADROLL_PIX_ID_PROD }}
          AJNA_SUBGRAPH_URL_GOERLI: ${{ secrets.AJNA_SUBGRAPH_URL_GOERLI }}
          AJNA_SUBGRAPH_URL: ${{ secrets.AJNA_SUBGRAPH_URL_PROD }}
          AJNA_SUBGRAPH_V2_URL_GOERLI: ${{ secrets.AJNA_SUBGRAPH_V2_URL_GOERLI }}
          AJNA_SUBGRAPH_V2_URL: ${{ secrets.AJNA_SUBGRAPH_V2_URL_PROD }}
          BLOCKNATIVE_API_KEY: ${{ secrets.BLOCKNATIVE_API_KEY_PROD }}
          COMMIT_SHA: ''
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
          INFURA_PROJECT_ID: ${{ secrets.INFURA_PROJECT_ID_PROD }}
          LATEST_TAG: latest
          MAILCHIMP_API_KEY: ${{ secrets.MAILCHIMP_API_KEY }}
          MAILCHIMP_ENDPOINT: ${{ secrets.MAILCHIMP_ENDPOINT }}
          MAINNET_CACHE_URL: ${{ secrets.MAINNET_CACHE_URL_PROD }}
          MIXPANEL_ENV: production
          MIXPANEL_KEY: ${{ secrets.MIXPANEL_KEY_PROD }}
          NEXT_PUBLIC_SENTRY_ENV: production
          NODE_ENV: production
          NODE_OPTIONS: '--max_old_space_size=4096'
          NOTIFICATIONS_HOST_GOERLI: ${{ secrets.NOTIFICATIONS_HOST_PROD_GOERLI }}
          NOTIFICATIONS_HOST: ${{ secrets.NOTIFICATIONS_HOST_PROD }}
          ONE_INCH_API_KEY: ${{ secrets.ONE_INCH_API_KEY_PROD }}
          ONE_INCH_API_URL: ${{ secrets.ONE_INCH_API_URL_PROD }}
          PRODUCT_HUB_KEY: ${{ secrets.PRODUCT_HUB_KEY }}
          REFERRAL_SUBGRAPH_URL: ${{ secrets.REFERRAL_SUBGRAPH_URL_PROD }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SHA_TAG: ''
          SHOW_BUILD_INFO: 0
        run: yarn build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          SHA_TAG: ''
          LATEST_TAG: latest
          ENVIRONMENT_TAG: prod
          ECR_REPO_NAME: summer-fi-prod
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build --cache-from=$ECR_REGISTRY/$ECR_REPO_NAME:$LATEST_TAG \
                       -t $ECR_REGISTRY/$ECR_REPO_NAME:$SHA_TAG \
                       -t $ECR_REGISTRY/$ECR_REPO_NAME:$LATEST_TAG \
                       -t $ECR_REGISTRY/$ECR_REPO_NAME:$ENVIRONMENT_TAG \
                       .
          docker push $ECR_REGISTRY/$ECR_REPO_NAME --all-tags

      - name: Update ECS service with latest Docker image
        id: service-update
        run: |
          aws ecs update-service --cluster $CLUSTER_NAME --service ${{ env.SERVICE_NAME }} --force-new-deployment --region $AWS_REGION

      - name: Wait for all services to become stable
        uses: oryanmoshe/ecs-wait-action@v1.3
        with:
          ecs-cluster: ${{ env.CLUSTER_NAME }}
          ecs-services: '["${{ env.SERVICE_NAME }}"]'

      - name: Invalidate CloudFront
        run:
          AWS_MAX_ATTEMPTS=10 aws cloudfront create-invalidation --distribution-id ${{
          secrets.CF_DIST_ID_PROD }} --paths "/*"
