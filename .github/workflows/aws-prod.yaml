on:
  push:
    branches:
      - main

name: Deploy to AWS Production

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      ECR_REPO_NAME: oasis-borrow-prod
      SERVICE_NAME: oasis-borrow-prod
      CLUSTER_NAME: oasis-borrow-prod

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.OAZO_PROD_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.OAZO_PROD_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Login to ECR
      uses: docker/login-action@v2
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      with:
        registry: ${{ env.ECR_REGISTRY }}

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract commit hash
      id: vars
      shell: bash
      run: |
        echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

    - name: Set up Docker Buildx
      id: buildex
      uses: docker/setup-buildx-action@v2
      with:
        install: true

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      uses: docker/build-push-action@v3
      env:
        SHA_TAG: ${{ steps.vars.outputs.sha_short }}
        LATEST_TAG: latest
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPO_NAME: ${{ github.event.repository.name }}
        DOCKERHUB_ORG: "oasisdexorg"
      with:
        context: .
        file: ./Dockerfile
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        build-args: |
          COMMIT_SHA=${{ env.SHA_TAG }}
          API_HOST=${{ secrets.API_HOST }}
          MIXPANEL_ENV=production
          MIXPANEL_KEY=${{ secrets.MIXPANEL_PROD_KEY }}
          ADROLL_ADV_ID=${{ secrets.ADROLL_ADV_ID_PROD }}
          ADROLL_PIX_ID=${{ secrets.ADROLL_PIX_ID_PROD }}
          MAINNET_CACHE_URL=${{ secrets.MAINNET_CACHE_URL }}
          MAILCHIMP_ENDPOINT=${{ secrets.MAILCHIMP_ENDPOINT }}
          MAILCHIMP_API_KEY=${{ secrets.MAILCHIMP_API_KEY }}
          INFURA_PROJECT_ID=${{ secrets.INFURA_PROJECT_ID }}
          ETHERSCAN_API_KEY=${{ secrets.ETHERSCAN_API_KEY }}
          BLOCKNATIVE_API_KEY=${{ secrets.BLOCKNATIVE_API_KEY }}
          SHOW_BUILD_INFO=1
          NODE_ENV=production
          NEXT_PUBLIC_SENTRY_ENV=production
          SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
        tags: |
          ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO_NAME }}:${{ env.LATEST_TAG }}
          ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO_NAME }}:${{ env.SHA_TAG }}
        cache-from: type=registry,ref=${{ env.DOCKERHUB_ORG }}/${{ env.REPO_NAME }}:buildcache
        cache-to: type=registry,ref=${{ env.DOCKERHUB_ORG }}/${{ env.REPO_NAME }}:buildcache,mode=max

    - name: Update ECS service with latest Docker image
      id: service-update
      run: |
        aws ecs update-service --cluster $CLUSTER_NAME --service ${{ env.SERVICE_NAME }} --force-new-deployment --region $AWS_REGION

    - name: Wait for all services to become stable
      uses: oryanmoshe/ecs-wait-action@v1.3
      with:
        ecs-cluster: ${{ env.CLUSTER_NAME }}
        ecs-services: '["${{ env.SERVICE_NAME }}"]'

    - name: Invalidate CloudFront
      run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CF_DIST_ID_PROD }} --paths "/*"
