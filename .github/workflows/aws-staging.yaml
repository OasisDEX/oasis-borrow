on:
  push:
    branches:
      - marcinciarka/leaner-docker-image-pro

name: Deploy to AWS Staging [test]

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-central-1
      ECR_REPO_NAME: summer-fi-staging
      SERVICE_NAME: summer-fi-staging
      CLUSTER_NAME: summer-fi-staging

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Use cache
        uses: jongwooo/next-cache@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Extract commit hash
        id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Download dependencies
        id: download-dependencies
        run: yarn --no-progress --non-interactive --frozen-lockfile

      - name: Build standalone app
        id: build-app
        env:
          SHA_TAG: ${{ steps.vars.outputs.sha_short }}
          LATEST_TAG: latest
          ENVIRONMENT_TAG: staging
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          CONFIG_URL: ${{ secrets.CONFIG_URL }}
          COMMIT_SHA: ${{ steps.vars.outputs.sha_short }}
          NOTIFICATIONS_HOST: ${{ secrets.NOTIFICATIONS_HOST_STAGING }}
          NOTIFICATIONS_HOST_GOERLI: ${{ secrets.NOTIFICATIONS_HOST_STAGING_GOERLI }}
          AJNA_SUBGRAPH_URL: ${{ secrets.AJNA_SUBGRAPH_URL_STAGING }}
          AJNA_SUBGRAPH_URL_GOERLI: ${{ secrets.AJNA_SUBGRAPH_URL_GOERLI }}
          AJNA_SUBGRAPH_V2_URL: ${{ secrets.AJNA_SUBGRAPH_V2_URL_STAGING }}
          AJNA_SUBGRAPH_V2_URL_GOERLI: ${{ secrets.AJNA_SUBGRAPH_V2_URL_GOERLI }}
          MIXPANEL_ENV: staging
          MIXPANEL_KEY: ${{ secrets.MIXPANEL_KEY_STAGING }}
          ADROLL_ADV_ID: ${{ secrets.ADROLL_ADV_ID_STAGING }}
          ADROLL_PIX_ID: ${{ secrets.ADROLL_PIX_ID_STAGING }}
          MAINNET_CACHE_URL: ${{ secrets.MAINNET_CACHE_URL_STAGING }}
          MAILCHIMP_ENDPOINT: ${{ secrets.MAILCHIMP_ENDPOINT }}
          MAILCHIMP_API_KEY: ${{ secrets.MAILCHIMP_API_KEY }}
          INFURA_PROJECT_ID: ${{ secrets.INFURA_PROJECT_ID_STAGING }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
          BLOCKNATIVE_API_KEY: ${{ secrets.BLOCKNATIVE_API_KEY_STAGING }}
          SHOW_BUILD_INFO: 1
          NODE_ENV: production
          NEXT_PUBLIC_SENTRY_ENV: staging
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          PRODUCT_HUB_KEY: ${{ secrets.PRODUCT_HUB_KEY }}
          ONE_INCH_API_KEY: ${{ secrets.ONE_INCH_API_KEY_STAGING }}
          ONE_INCH_API_URL: ${{ secrets.ONE_INCH_API_URL_STAGING }}
          REFERRAL_SUBGRAPH_URL: ${{ secrets.REFERRAL_SUBGRAPH_URL_STAGING }}
        run: yarn build

      - name: Run migrations
        id: migrate
        run: yarn migrate

      # - name: Build runner image
      #   id: build-image
      #   env:
      #     SHA_TAG: ${{ steps.vars.outputs.sha_short }}
      #     LATEST_TAG: latest
      #     ENVIRONMENT_TAG: staging
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #   run: |
      #     # Build a docker container and
      #     # push it to ECR so that it can
      #     # be deployed to ECS.
      #     docker build --cache-from=$ECR_REGISTRY/$ECR_REPO_NAME:$LATEST_TAG \
      #                  -t $ECR_REGISTRY/$ECR_REPO_NAME:$SHA_TAG \
      #                  -t $ECR_REGISTRY/$ECR_REPO_NAME:$LATEST_TAG \
      #                  -t $ECR_REGISTRY/$ECR_REPO_NAME:$ENVIRONMENT_TAG \
      #                  .
      #     docker push $ECR_REGISTRY/$ECR_REPO_NAME --all-tags

      # - name: Update ECS service with latest Docker image
      #   id: service-update
      #   run: |
      #     aws ecs update-service --cluster $CLUSTER_NAME --service ${{ env.SERVICE_NAME }} --force-new-deployment --region $AWS_REGION

      # - name: Wait for all services to become stable
      #   uses: oryanmoshe/ecs-wait-action@v1.3
      #   with:
      #     ecs-cluster: ${{ env.CLUSTER_NAME }}
      #     ecs-services: '["${{ env.SERVICE_NAME }}"]'

      # - name: Invalidate CloudFront
      #   run:
      #     AWS_MAX_ATTEMPTS=10 aws cloudfront create-invalidation --distribution-id ${{
      #     secrets.CF_DIST_ID_STAGING }} --paths "/*"
