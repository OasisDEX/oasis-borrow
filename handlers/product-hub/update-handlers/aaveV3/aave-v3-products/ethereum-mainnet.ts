import { EarnStrategies } from '@prisma/client'
import { NetworkNames } from 'blockchain/networks'
import { depositTokensConfigList } from 'features/aave/strategies/deposit-tokens-config-list'
import { type ProductHubItemWithoutAddress, ProductHubProductType } from 'features/productHub/types'
import { getTokenGroup } from 'handlers/product-hub/helpers'
import type { AaveProductHubItemSeed } from 'handlers/product-hub/update-handlers/aaveV3/aave-v3-products/types'
import { parseLendingProducts } from 'helpers/parseLendingProducts'
import { LendingProtocol } from 'lendingProtocols'

export const aaveSeed: AaveProductHubItemSeed[] = [
  {
    collateral: 'WSTETH',
    debt: 'ETH',
    strategyType: 'long',
    types: ['borrow', 'earn'],
  },
  {
    collateral: 'CBETH',
    debt: 'ETH',
    strategyType: 'long',
    types: ['borrow', 'earn'],
  },
  {
    collateral: 'ETH',
    debt: 'USDC',
    strategyType: 'long',
    types: ['borrow', 'multiply'],
  },
  {
    collateral: 'CBETH',
    debt: 'USDC',
    strategyType: 'long',
    types: ['borrow', 'multiply'],
  },
  {
    collateral: 'CBETH',
    debt: 'DAI',
    strategyType: 'long',
    types: ['multiply'],
  },
  {
    collateral: 'WBTC',
    debt: 'USDC',
    strategyType: 'long',
    types: ['multiply', 'borrow'],
  },
  {
    collateral: 'WSTETH',
    debt: 'USDC',
    strategyType: 'long',
    types: ['multiply', 'borrow'],
  },
  {
    collateral: 'DAI',
    debt: 'ETH',
    strategyType: 'short',
    types: ['multiply', 'borrow'],
  },
  {
    collateral: 'DAI',
    debt: 'WBTC',
    strategyType: 'short',
    types: ['multiply', 'borrow'],
  },
  {
    collateral: 'ETH',
    debt: 'DAI',
    strategyType: 'long',
    types: ['multiply', 'borrow'],
  },
  {
    collateral: 'RETH',
    debt: 'DAI',
    strategyType: 'long',
    types: ['multiply', 'borrow'],
  },
  {
    collateral: 'RETH',
    debt: 'USDC',
    strategyType: 'long',
    types: ['multiply', 'borrow'],
  },
  {
    collateral: 'USDC',
    debt: 'ETH',
    strategyType: 'short',
    types: ['multiply', 'borrow'],
  },
  {
    collateral: 'USDC',
    debt: 'WBTC',
    strategyType: 'short',
    types: ['multiply', 'borrow'],
  },
  {
    collateral: 'WBTC',
    debt: 'DAI',
    strategyType: 'long',
    types: ['multiply', 'borrow'],
  },
  {
    collateral: 'WSTETH',
    debt: 'DAI',
    strategyType: 'long',
    types: ['multiply', 'borrow'],
  },
  {
    collateral: 'WSTETH',
    debt: 'USDT',
    strategyType: 'long',
    types: ['multiply', 'borrow'],
  },
  {
    collateral: 'SDAI',
    debt: 'USDC',
    strategyType: 'long',
    types: ['earn', 'borrow'],
  },
  {
    collateral: 'SDAI',
    debt: 'LUSD',
    strategyType: 'long',
    types: ['earn', 'borrow'],
  },
  {
    collateral: 'SDAI',
    debt: 'FRAX',
    strategyType: 'long',
    types: ['earn', 'borrow'],
  },
  {
    collateral: 'SDAI',
    debt: 'DAI',
    strategyType: 'long',
    types: ['earn'],
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'CBETH',
    primaryTokenGroup: 'ETH',
    secondaryToken: 'GHO',
    depositToken: 'CBETH',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
    label: 'CBETH/GHO',
    multiplyStrategyType: 'long',
    multiplyStrategy: 'Long CBETH',
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'CBETH',
    primaryTokenGroup: 'ETH',
    secondaryToken: 'GHO',
    depositToken: 'CBETH',
    label: 'CBETH/GHO',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'LDO',
    primaryTokenGroup: getTokenGroup('LDO'),
    secondaryToken: 'USDT',
    depositToken: 'LDO',
    label: 'LDO/USDT',
    multiplyStrategyType: 'long',
    multiplyStrategy: 'Long LDO',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'LDO',
    primaryTokenGroup: getTokenGroup('LDO'),
    secondaryToken: 'USDT',
    depositToken: 'LDO',
    label: 'LDO/USDT',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },

  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'LINK',
    primaryTokenGroup: getTokenGroup('LINK'),
    secondaryToken: 'DAI',
    depositToken: 'LINK',
    label: 'LINK/DAI',
    multiplyStrategyType: 'long',
    multiplyStrategy: 'Long LINK',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'LINK',
    primaryTokenGroup: getTokenGroup('LINK'),
    secondaryToken: 'DAI',
    depositToken: 'LINK',
    label: 'LINK/DAI',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'LINK',
    primaryTokenGroup: getTokenGroup('LINK'),
    secondaryToken: 'GHO',
    depositToken: 'LINK',
    label: 'LINK/GHO',
    multiplyStrategyType: 'long',
    multiplyStrategy: 'Long LINK',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'LINK',
    primaryTokenGroup: getTokenGroup('LINK'),
    secondaryToken: 'GHO',
    depositToken: 'LINK',
    label: 'LINK/GHO',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'LINK',
    primaryTokenGroup: getTokenGroup('LINK'),
    secondaryToken: 'USDC',
    depositToken: 'LINK',
    label: 'LINK/USDC',
    multiplyStrategyType: 'long',
    multiplyStrategy: 'Long LINK',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'LINK',
    primaryTokenGroup: getTokenGroup('LINK'),
    secondaryToken: 'USDC',
    depositToken: 'LINK',
    label: 'LINK/USDC',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'LINK',
    primaryTokenGroup: getTokenGroup('LINK'),
    secondaryToken: 'USDT',
    depositToken: 'LINK',
    label: 'LINK/USDT',
    multiplyStrategyType: 'long',
    multiplyStrategy: 'Long LINK',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'LINK',
    primaryTokenGroup: getTokenGroup('LINK'),
    secondaryToken: 'USDT',
    depositToken: 'LINK',
    label: 'LINK/USDT',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'LINK',
    primaryTokenGroup: getTokenGroup('LINK'),
    secondaryToken: 'ETH',
    depositToken: 'LINK',
    label: 'LINK/ETH',
    multiplyStrategyType: 'long',
    multiplyStrategy: 'Long LINK',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'LINK',
    primaryTokenGroup: getTokenGroup('LINK'),
    secondaryToken: 'ETH',
    depositToken: 'LINK',
    label: 'LINK/ETH',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'MKR',
    primaryTokenGroup: getTokenGroup('MKR'),
    secondaryToken: 'DAI',
    depositToken: 'MKR',
    label: 'MKR/DAI',
    multiplyStrategyType: 'long',
    multiplyStrategy: 'Long MKR',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'MKR',
    primaryTokenGroup: getTokenGroup('MKR'),
    secondaryToken: 'DAI',
    depositToken: 'MKR',
    label: 'MKR/DAI',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'RETH',
    primaryTokenGroup: getTokenGroup('RETH'),
    secondaryToken: 'GHO',
    depositToken: 'RETH',
    label: 'RETH/GHO',
    multiplyStrategyType: 'long',
    multiplyStrategy: 'Long RETH',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'RETH',
    primaryTokenGroup: getTokenGroup('RETH'),
    secondaryToken: 'GHO',
    depositToken: 'RETH',
    label: 'RETH/GHO',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'RETH',
    primaryTokenGroup: getTokenGroup('RETH'),
    secondaryToken: 'USDT',
    depositToken: 'RETH',
    label: 'RETH/USDT',
    multiplyStrategyType: 'long',
    multiplyStrategy: 'Long RETH',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'RETH',
    primaryTokenGroup: getTokenGroup('RETH'),
    secondaryToken: 'USDT',
    depositToken: 'RETH',
    label: 'RETH/USDT',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'SDAI',
    primaryTokenGroup: getTokenGroup('SDAI'),
    secondaryToken: 'GHO',
    depositToken: 'SDAI',
    label: 'SDAI/GHO',
    multiplyStrategyType: 'long',
    multiplyStrategy: 'Long SDAI',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'SDAI',
    primaryTokenGroup: getTokenGroup('SDAI'),
    secondaryToken: 'GHO',
    depositToken: 'SDAI',
    label: 'SDAI/GHO',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'SDAI',
    primaryTokenGroup: getTokenGroup('SDAI'),
    secondaryToken: 'USDT',
    depositToken: 'SDAI',
    label: 'SDAI/USDT',
    multiplyStrategyType: 'long',
    multiplyStrategy: 'Long SDAI',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'SDAI',
    primaryTokenGroup: getTokenGroup('SDAI'),
    secondaryToken: 'USDT',
    depositToken: 'SDAI',
    label: 'SDAI/USDT',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'SDAI',
    primaryTokenGroup: getTokenGroup('SDAI'),
    secondaryToken: 'WBTC',
    depositToken: 'SDAI',
    label: 'SDAI/WBTC',
    multiplyStrategyType: 'long',
    multiplyStrategy: 'Long SDAI',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'SDAI',
    primaryTokenGroup: getTokenGroup('SDAI'),
    secondaryToken: 'WBTC',
    depositToken: 'SDAI',
    label: 'SDAI/WBTC',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'SDAI',
    primaryTokenGroup: getTokenGroup('SDAI'),
    secondaryToken: 'ETH',
    depositToken: 'SDAI',
    label: 'SDAI/ETH',
    multiplyStrategyType: 'long',
    multiplyStrategy: 'Long SDAI',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'SDAI',
    primaryTokenGroup: getTokenGroup('SDAI'),
    secondaryToken: 'ETH',
    depositToken: 'SDAI',
    label: 'SDAI/ETH',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'WBTC',
    primaryTokenGroup: getTokenGroup('WBTC'),
    secondaryToken: 'GHO',
    depositToken: 'WBTC',
    label: 'WBTC/GHO',
    multiplyStrategyType: 'long',
    multiplyStrategy: 'Long WBTC',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'WBTC',
    primaryTokenGroup: getTokenGroup('WBTC'),
    secondaryToken: 'GHO',
    depositToken: 'WBTC',
    label: 'WBTC/GHO',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'WBTC',
    primaryTokenGroup: getTokenGroup('WBTC'),
    secondaryToken: 'LUSD',
    depositToken: 'WBTC',
    label: 'WBTC/LUSD',
    multiplyStrategyType: 'long',
    multiplyStrategy: 'Long WBTC',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'WBTC',
    primaryTokenGroup: getTokenGroup('WBTC'),
    secondaryToken: 'LUSD',
    depositToken: 'WBTC',
    label: 'WBTC/LUSD',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'WBTC',
    primaryTokenGroup: getTokenGroup('WBTC'),
    secondaryToken: 'USDT',
    depositToken: 'WBTC',
    label: 'WBTC/USDT',
    multiplyStrategyType: 'long',
    multiplyStrategy: 'Long WBTC',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'WBTC',
    primaryTokenGroup: getTokenGroup('WBTC'),
    secondaryToken: 'USDT',
    depositToken: 'WBTC',
    label: 'WBTC/USDT',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'WBTC',
    primaryTokenGroup: getTokenGroup('WBTC'),
    secondaryToken: 'ETH',
    depositToken: 'WBTC',
    label: 'WBTC/ETH',
    multiplyStrategyType: 'long',
    multiplyStrategy: 'Long WBTC',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'WBTC',
    primaryTokenGroup: getTokenGroup('WBTC'),
    secondaryToken: 'ETH',
    depositToken: 'WBTC',
    label: 'WBTC/ETH',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'ETH',
    primaryTokenGroup: getTokenGroup('ETH'),
    secondaryToken: 'GHO',
    depositToken: 'ETH',
    label: 'ETH/GHO',
    multiplyStrategyType: 'long',
    multiplyStrategy: 'Long ETH',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'ETH',
    primaryTokenGroup: getTokenGroup('ETH'),
    secondaryToken: 'GHO',
    depositToken: 'ETH',
    label: 'ETH/GHO',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'ETH',
    primaryTokenGroup: getTokenGroup('ETH'),
    secondaryToken: 'USDT',
    depositToken: 'ETH',
    label: 'ETH/USDT',
    multiplyStrategyType: 'long',
    multiplyStrategy: 'Long ETH',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'ETH',
    primaryTokenGroup: getTokenGroup('ETH'),
    secondaryToken: 'USDT',
    depositToken: 'ETH',
    label: 'ETH/USDT',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'ETH',
    primaryTokenGroup: getTokenGroup('ETH'),
    secondaryToken: 'WBTC',
    depositToken: 'ETH',
    label: 'ETH/WBTC',
    multiplyStrategyType: 'long',
    multiplyStrategy: 'Long ETH',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'ETH',
    primaryTokenGroup: getTokenGroup('ETH'),
    secondaryToken: 'WBTC',
    depositToken: 'ETH',
    label: 'ETH/WBTC',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'WSTETH',
    primaryTokenGroup: getTokenGroup('WSTETH'),
    secondaryToken: 'CBETH',
    depositToken: 'WSTETH',
    label: 'WSTETH/CBETH',
    multiplyStrategyType: 'long',
    multiplyStrategy: 'Long WSTETH',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'WSTETH',
    primaryTokenGroup: getTokenGroup('WSTETH'),
    secondaryToken: 'CBETH',
    depositToken: 'WSTETH',
    label: 'WSTETH/CBETH',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'WSTETH',
    primaryTokenGroup: getTokenGroup('WSTETH'),
    secondaryToken: 'GHO',
    depositToken: 'WSTETH',
    label: 'WSTETH/GHO',
    multiplyStrategyType: 'long',
    multiplyStrategy: 'Long WSTETH',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'WSTETH',
    primaryTokenGroup: getTokenGroup('WSTETH'),
    secondaryToken: 'GHO',
    depositToken: 'WSTETH',
    label: 'WSTETH/GHO',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'WSTETH',
    primaryTokenGroup: getTokenGroup('WSTETH'),
    secondaryToken: 'LUSD',
    depositToken: 'WSTETH',
    label: 'WSTETH/LUSD',
    multiplyStrategyType: 'long',
    multiplyStrategy: 'Long WSTETH',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'WSTETH',
    primaryTokenGroup: getTokenGroup('WSTETH'),
    secondaryToken: 'LUSD',
    depositToken: 'WSTETH',
    label: 'WSTETH/LUSD',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'WSTETH',
    primaryTokenGroup: getTokenGroup('WSTETH'),
    secondaryToken: 'RPL',
    depositToken: 'WSTETH',
    label: 'WSTETH/RPL',
    multiplyStrategyType: 'long',
    multiplyStrategy: 'Long WSTETH',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'WSTETH',
    primaryTokenGroup: getTokenGroup('WSTETH'),
    secondaryToken: 'RPL',
    depositToken: 'WSTETH',
    label: 'WSTETH/RPL',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },

  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'DAI',
    primaryTokenGroup: getTokenGroup('DAI'),
    secondaryToken: 'MKR',
    depositToken: 'DAI',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
    label: 'DAI/MKR',
    multiplyStrategyType: 'short',
    multiplyStrategy: 'Short MKR',
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'DAI',
    primaryTokenGroup: getTokenGroup('DAI'),
    secondaryToken: 'MKR',
    depositToken: 'DAI',
    label: 'DAI/MKR',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'USDC',
    primaryTokenGroup: getTokenGroup('USDC'),
    secondaryToken: 'GHO',
    depositToken: 'USDC',
    label: 'USDC/GHO',
    multiplyStrategyType: 'short',
    multiplyStrategy: 'Short GHO',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'USDC',
    primaryTokenGroup: getTokenGroup('USDC'),
    secondaryToken: 'GHO',
    depositToken: 'USDC',
    label: 'USDC/GHO',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'USDC',
    primaryTokenGroup: getTokenGroup('USDC'),
    secondaryToken: 'USDT',
    depositToken: 'USDC',
    label: 'USDC/USDT',
    multiplyStrategyType: 'short',
    multiplyStrategy: 'Short USDT',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'USDC',
    primaryTokenGroup: getTokenGroup('USDC'),
    secondaryToken: 'USDT',
    depositToken: 'USDC',
    label: 'USDC/USDT',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'USDC',
    primaryTokenGroup: getTokenGroup('USDC'),
    secondaryToken: 'WSTETH',
    depositToken: 'USDC',
    label: 'USDC/WSTETH',
    multiplyStrategyType: 'short',
    multiplyStrategy: 'Short WSTETH',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'USDC',
    primaryTokenGroup: getTokenGroup('USDC'),
    secondaryToken: 'WSTETH',
    depositToken: 'USDC',
    label: 'USDC/WSTETH',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Multiply],
    primaryToken: 'USDT',
    primaryTokenGroup: getTokenGroup('USDT'),
    secondaryToken: 'ETH',
    depositToken: 'USDT',
    label: 'USDT/ETH',
    multiplyStrategyType: 'short',
    multiplyStrategy: 'Short ETH',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
  {
    product: [ProductHubProductType.Borrow],
    primaryToken: 'USDT',
    primaryTokenGroup: getTokenGroup('USDT'),
    secondaryToken: 'ETH',
    depositToken: 'USDT',
    label: 'USDT/ETH',
    network: NetworkNames.ethereumMainnet,
    protocol: LendingProtocol.AaveV3,
  },
]

const borrowProducts = aaveSeed
  .filter((strategy) => strategy.types.includes('borrow'))
  .map((strategy): ProductHubItemWithoutAddress => {
    return {
      product: [ProductHubProductType.Borrow],
      primaryToken: strategy.collateral.toUpperCase(),
      primaryTokenGroup: getTokenGroup(strategy.collateral.toUpperCase()),
      secondaryToken: strategy.debt.toUpperCase(),
      secondaryTokenGroup: getTokenGroup(strategy.debt.toUpperCase()),
      depositToken: strategy.deposit?.toUpperCase() ?? strategy.collateral.toUpperCase(),
      label: `${strategy.collateral.toUpperCase()}/${strategy.debt.toUpperCase()}`,
      network: NetworkNames.ethereumMainnet,
      protocol: LendingProtocol.AaveV3,
    }
  })

const earnProducts = aaveSeed
  .filter((strategy) => strategy.types.includes('earn'))
  .map((strategy): ProductHubItemWithoutAddress => {
    return {
      product: [ProductHubProductType.Earn],
      primaryToken: strategy.collateral.toUpperCase(),
      primaryTokenGroup: getTokenGroup(strategy.collateral.toUpperCase()),
      secondaryToken: strategy.debt.toUpperCase(),
      secondaryTokenGroup: getTokenGroup(strategy.debt.toUpperCase()),
      label: `${strategy.collateral.toUpperCase()}/${strategy.debt.toUpperCase()}`,
      network: NetworkNames.ethereumMainnet,
      protocol: LendingProtocol.AaveV3,
      earnStrategyDescription: `${strategy.collateral}/${strategy.debt} Yield Loop`,
      earnStrategy: EarnStrategies.yield_loop,
      managementType: 'active',
    }
  })

const multiplyProducts = aaveSeed
  .filter((strategy) => strategy.types.includes('multiply'))
  .map((strategy): ProductHubItemWithoutAddress => {
    return {
      product: [ProductHubProductType.Multiply],
      primaryToken: strategy.collateral.toUpperCase(),
      primaryTokenGroup: getTokenGroup(strategy.collateral.toUpperCase()),
      secondaryToken: strategy.debt.toUpperCase(),
      secondaryTokenGroup: getTokenGroup(strategy.debt.toUpperCase()),
      network: NetworkNames.ethereumMainnet,
      protocol: LendingProtocol.AaveV3,
      label: `${strategy.collateral.toUpperCase()}/${strategy.debt.toUpperCase()}`,
      multiplyStrategyType: strategy.strategyType,
      multiplyStrategy:
        strategy.strategyType === 'long' ? `Long ${strategy.collateral}` : `Short ${strategy.debt}`,
    }
  })

const lendingProducts = parseLendingProducts(
  depositTokensConfigList,
  NetworkNames.ethereumMainnet,
  LendingProtocol.AaveV3,
)

export const aaveV3EthereumMainnetProductHubProducts: ProductHubItemWithoutAddress[] = [
  ...borrowProducts,
  ...earnProducts,
  ...multiplyProducts,
  ...lendingProducts,
]
